import pandas as pd
import numpy as np
import os
os.chdir("E:/ReNew Power")
#from sklearn.impute import KNNImputer
import seaborn as sb
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm

train=pd.read_csv("acme_bank_data_v2.csv")
train.head()

train.isnull().sum()

num_vr=train.iloc[:,[1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]]
num_vr.head()

round(num_vr.describe(),2)

corr1=num_vr.corr()
sb.heatmap(corr1)

train[train.isna().any(axis=1)]

corr1[corr1>0.5]

f,(ax_box,ax_hist)=plt.subplots(2,gridspec_kw={"height_ratios":(.15,.85)})
sb.boxplot(num_vr['AGE'],ax=ax_box)
sb.distplot(num_vr['AGE'],ax=ax_hist,kde=False)
plt.show()

#filling missing values of with 0 - Reason (To be stated while documenting)
train_1=train.apply(lambda x:x.fillna(x.mean())
              #x.fillna(x.value_count().index[0])
              #if x.dtype=='object'
              #else 
                )
train_1.isnull().sum()
#Since importing KNN Imputer is showing error using Means

train_1.to_csv('train_1.csv')

f,(ax_box,ax_hist)=plt.subplots(2,gridspec_kw={"height_ratios":(.15,.85)})
sb.boxplot(num_vr_1['LIMIT_BAL'],ax=ax_box)
sb.distplot(num_vr_1['LIMIT_BAL'],ax=ax_hist,kde=False)
plt.show()

pd.crosstab(df_cleaned['SEX'],df_cleaned['default payment next month'])

pd.crosstab(df_cleaned['MARRIAGE'],df_cleaned['default payment next month'])

pd.crosstab(df_cleaned['EDUCATION'],df_cleaned['default payment next month'])

pd.crosstab(df_cleaned['default payment next month'],df_cleaned['default payment next month'])

train_pay=num_vr_1.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]]

#from sklearn.decomposition import PCA
#pca=PCA(tol=0.7)
#X_transformed_pay=pca.fit_transform(train_pay)
#pca.explained_variance_ratio_

def outliers(df,ft):
    Q1=df[ft].quantile(0.25)
    Q3=df[ft].quantile(0.75)
    IQR=Q3-Q1
    lb=Q1-3*IQR
    ub=Q3+3*IQR
    ls=df.index[(df[ft]<lb)|(df[ft]>ub)]
    return ls

index_lst=[]
for feature in ["LIMIT_BAL","AGE","PAY_0","PAY_2","PAY_3","PAY_4","PAY_5","PAY_6","BILL_AMT1","BILL_AMT2",
                "BILL_AMT3","BILL_AMT4","BILL_AMT5","BILL_AMT6","PAY_AMT1","PAY_AMT2","PAY_AMT3","PAY_AMT4",
                "PAY_AMT5","PAY_AMT6"]:
    index_lst.extend(outliers(train_1,feature))

len(index_lst)

def clean(df,ls):
    ls=sorted(set(ls))
    df=df.drop(ls)
    return df

df_cleaned=clean(train_1,index_lst)

df_cleaned.shape

g = sb.catplot(x="AGE", y="default payment next month", row="SEX",
                kind="box", orient="h", height=1.5, aspect=4,
                data=df_cleaned.query("AGE < 70"))
g.set(xscale="log")

g = sb.catplot(x="AGE", y="default payment next month", row="SEX",
                kind="box", orient="h", height=1.5, aspect=4,
                data=df_cleaned.query("AGE < 70"))
g.set(xscale="log")

df_cleaned.head()

num_vr=df_cleaned.iloc[:,[1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]]
num_vr.head()

round(num_vr.describe(),2)

corr1=num_vr.corr()
sb.heatmap(corr1)

df_ord=df_cleaned.iloc[:,[2,3,4]]
df_pay=df_cleaned.iloc[:,[6,7,8,9,10,11]]
df_bill=df_cleaned.iloc[:,[12,13,14,15,16,17]]
df_py_amt=df_cleaned.iloc[:,[18,19,20,21,22,23]]

trnfrm_ord= PCA(n_components=1)
tnf_ord=trnfrm_ord.fit_transform(df_ord)

trnfrm_pay= PCA(n_components=1)
tnf_pay=trnfrm_pay.fit_transform(df_pay)

trnfrm_bill= PCA(n_components=1)
tnf_bill=trnfrm_bill.fit_transform(df_bill)

trnfrm_py_amt= PCA(n_components=1)
tnf_py_amt=trnfrm_pay.fit_transform(df_py_amt)

ord_tnf=pd.DataFrame(tnf_ord)
ord_tnf['index']=range(1,len(ord_tnf)+1)

pay_tnf=pd.DataFrame(tnf_pay)
pay_tnf['index']=range(1,len(pay_tnf)+1)

bill_tnf=pd.DataFrame(tnf_bill)
bill_tnf['index']=range(1,len(bill_tnf)+1)

py_am_tnf=pd.DataFrame(tnf_py_amt)
py_am_tnf['index']=range(1,len(py_am_tnf)+1)


merge_1=pd.merge(ord_tnf,pay_tnf,on='index',copy=False)
merge_1.rename({'0_x': 'Cat', '0_y': 'Pay'}, axis=1)
merge_2=pd.merge(merge_1,bill_tnf,on='index',copy=False)
merge_3=pd.merge(merge_2,py_am_tnf,on='index',copy=False)
merge_3.columns=["Cat","index","Pay","Bill","Pay_Amt"]
merge_3.head()

x1=df_cleaned.iloc[:,[1,5,24]]
x1['index']=range(1,len(x1)+1)
merge_4=pd.merge(merge_3,x1,on='index',copy=False)
merge_4.shape

merge_4.head()

x=merge_4.iloc[:,[0,2,3,4,5,6]]
y=merge_4.iloc[:,7]

scld_x_train=StandardScaler().fit(x)
scld_x_train
tnf_x_train=scld_x_train.transform(x)

x_train,x_test,y_train,y_test=train_test_split(tnf_x_train,y,test_size=0.2)

md_lg_1=LogisticRegression(solver='liblinear',C=1)
md_lg_1.fit(x_train,y_train)
y_vald=md_lg_1.predict(x_train)
y_pred=md_lg_1.predict(x_test)

accuracy_score(y_train,y_vald),accuracy_score(y_test,y_pred),f1_score(y_train,y_vald),f1_score(y_test,y_pred)

print(classification_report(y_train,y_vald))

print(classification_report(y_test,y_pred))

print(roc_auc_score(y_test,y_pred))

cnf_matrix=confusion_matrix(y_test,y_pred)
FP = cnf_matrix.sum(axis=0) - np.diag(cnf_matrix)  
FN = cnf_matrix.sum(axis=1) - np.diag(cnf_matrix)
TP = np.diag(cnf_matrix)
TN = cnf_matrix.sum() - (FP + FN + TP)

FP = FP.astype(float)
FN = FN.astype(float)
TP = TP.astype(float)
TN = TN.astype(float)
TPR = TP/(TP+FN)
TPR

cnf_matrix

train_md_rf=RandomForestClassifier(n_estimators=10)
train_md_rf.fit(x_train,y_train)
y_vald_rf=train_md_rf.predict(x_train)
y_pred_rf=train_md_rf.predict(x_test)

accuracy_score(y_train,y_vald_rf),accuracy_score(y_test,y_pred_rf),f1_score(y_train,y_vald_rf),f1_score(y_test,y_pred_rf)

print(classification_report(y_train,y_vald_rf))

print(classification_report(y_test,y_pred_rf))

md_svm_1=svm.SVC(gamma='auto',C=10,kernel='rbf')
md_svm_1.fit(x_train,y_train)
y_vald_svm=md_svm_1.predict(x_train)
y_pred_svm=md_svm_1.predict(x_test)

accuracy_score(y_train,y_vald_svm),accuracy_score(y_test,y_pred_svm),f1_score(y_train,y_vald_svm),f1_score(y_test,y_pred_svm)

print(classification_report(y_train,y_vald_svm))

print(classification_report(y_test,y_pred_svm))
